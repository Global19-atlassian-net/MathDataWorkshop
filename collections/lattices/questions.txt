
question 1:
representation of the directed graph: perhaps as a list of lists?
Elements of the lattice are numbered 1 to n.
Then for each element, tell what are its "parents" (covering elements).
=> For now we will use a STRING containing the covering relation
   graph in digraph6 format. It is machine-readable but not
   human-readable.

question 2:
We have several different collections of lattices.
The underlying type of object is the same ("a lattice").
Should we use the same schema and different data files, or how?
Or just one huge data file that contains all lattices we know of?
Different but related question: Should the USER INTERFACE show
separate collections (modular lattices, graded lattices), or
just one big collection and the user will use filters to focus
on e.g. modular lattices?

question 3:
How to encode relations between objects?  "This lattice is the dual of
that lattice"

Note: For any lattice, mathematically there exists always the unique
dual lattice (= turn the lattice upside down). However we might not
have that object in our collection.  Eg. I have a collection of
semimodular lattices. Their duals need not be semimodular, so they are
not in that collection.  Presumably we may want to say "no such object
exists" (if that is mathematically true) or "we do not have the object
here".
