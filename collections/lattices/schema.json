{
    "displayName": "Lattices",
    "slug": "lat",
    "properties": [
        {
            "slug": "covering",
            "displayName": "Covering relation",
            "codec": "ListAsArray_StandardInt"   // This should represent a graph
        },
        {
            "slug": "name",
            "displayName": "Common name",
            "codec": "StandardString"
        },
        {
            "slug": "n",
            "displayName": "size",
            "codec": "StandardInt"
        },
        {
            "slug": "len",
            "displayName": "length",
            "codec": "StandardInt"
        },
        {
            "slug": "ncoatom",
            "displayName": "number of coatoms",
            "codec": "StandardInt"
        },
        {
            "slug": "natom",
            "displayName": "number of atoms",
            "codec": "StandardInt"
        },
        {
            "slug": "isgraded",
            "displayName": "is graded",
            "codec": "StandardBool"
        },
        {
            "slug": "issemi",
            "displayName": "is semimodular",
            "codec": "StandardBool"
        }
        {
            "slug": "islower",
            "displayName": "is lower semimodular",
            "codec": "StandardBool"
        }
        {
            "slug": "ismod",
            "displayName": "is modular",
            "codec": "StandardBool"
        }
        {
            "slug": "isatomistic",
            "displayName": "Atomistic",
            "codec": "StandardBool"
        }
        {
            "slug": "isgeo",
            "displayName": "is geometric",
            "codec": "StandardBool"
        }
        {
            "slug": "isdist",
            "displayName": "is distributive",
            "codec": "StandardBool"
        }
        {
            "slug": "isdeco",
            "displayName": "is vertically decomposable",
            "codec": "StandardBool"
        }
        {
            "slug": "isselfdual",
            "displayName": "is self-dual",
            "codec": "StandardBool"
        }
    ]
}


// question 1:
// representation of the directed graph: perhaps as a list of lists?
// Elements of the lattice are numbered 1 to n.
// Then for each element, tell what are its "parents" (covering elements).

// question 2:
// We have several different collections of lattices.
// The underlying type of object is the same ("a lattice").
// Should we use the same schema and different data files, or how?
// Or just one huge data file that contains all lattices we know of?

// question 3:
// How to encode relations between objects?
// "This lattice is the dual of that lattice"
// Note: For any lattice, there is always THE dual lattice
// (= turn it upside down), but it might not be in the same collection.
// Eg. I have a collection of semimodular lattices. Their duals need
// not be semimodular so they are not in that collection.
//
// Something like
//        {
//            "slug": "dual",
//            "displayName": "dual lattice",
//            "codec": "???"
//        }

